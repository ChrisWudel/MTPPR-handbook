[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Little Handbook for MTPPR",
    "section": "",
    "text": "Welcome\nMulti-Trait Point Pattern Reconstruction (MTPPR) is an advanced method for analyzing and modeling spatial patterns across various scientific disciplines such as ecology, biology, and geography. MTPPR allows the reconstruction of spatial point distributions, considering multiple associated traits or attributes. This handbook provides an overview of the key concepts, steps, and applications of MTPPR.\nIf you would like to find out more about MTPPR pattern reconstruction, read Wudel et al. (2023) or consult the references.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Multi-Trait Point Pattern Reconstruction (MTPPR) is a statistical method used to analyze and reconstruct spatial patterns. Unlike traditional methods, MTPPR enables the reconstruction of spatial point distributions while considering multiple associated traits (marks). Previous methods for reconstructing point patterns either only consider a single mark or multiple marks independently, neglecting their correlations. MTPPR employs various second-order summary statistics of point pattern analysis, such as the pair correlation function and the mark correlation function.\nFigure: This illustration depicts the issue in reconstructing dot patterns where the correlations between the marks are not considered. This results in unrealistic proportions, as illustrated here by the disproportionate trees.\n\n\n\n\n\nThis method is crucial in fields like ecology, biology, and geography, where understanding the spatial distribution of entities and their traits is essential. By considering both the spatial locations and the various traits of points, MTPPR allows users to uncover complex interactions and dependencies that influence the arrangement and dynamics of the systems under study.\nFor example, in ecology, MTPPR can be used to reconstruct the distribution of different tree species in a forest, taking into account attributes such as age, height, and health status. This provides insights into ecological processes such as competition, habitat preferences, and the impact of environmental factors. Similarly, in epidemiology, MTPPR can help understand the spread of diseases by correlating spatial data with demographic and environmental traits.\n\nKey Concepts\n\nPoint Patterns:\n\nSpatial data points representing the positions of objects or events within a defined area\nExamples: Locations of trees in a forest, distribution of animal burrows, spread of disease cases\n\nTraits:\n\nAdditional attributes or characteristics associated with each point\nExamples: Tree species, age, height, health status\n\nMulti-Trait Analysis:\n\nSimultaneous consideration of multiple attributes to understand their influence on spatial arrangement\nCan reveal complex interactions and dependencies between traits\n\nReconstruction:\n\nGeneration of statistically similar point patterns for various applications through reconstruction algorithms\nExamples: Creating null model patterns for spatial point pattern analysis and constructing artificial datasets suitable for initializing forest ABMs and other stand simulators\n\n\n\n\nSteps in MTPPR\n\nData Collection:\n\nGathering spatial data along with associated traits through field surveys, remote sensing, or other methods\n\nSpatial Analysis:\n\nAnalyzing the spatial arrangement of points using techniques such as Ripley’s K-function, pair correlation function, or spatial autocorrelation\nAssessing the distribution (clustered, random, regular) and the influence of spatial scale\n\nTrait Analysis:\n\nEvaluating the distribution and correlation of traits using methods like the mark correlation function\n\nModel Construction:\n\nDeveloping models that integrate spatial and trait information using statistical models (e.g., spatial point process models)\nAim: Reconstructing the underlying processes leading to the observed multi-trait point pattern\n\nReconstruction and Validation:\n\nReconstructing point patterns based on the developed models to predict spatial arrangements under various scenarios\nValidating models by comparing simulated patterns with actual observations\n\nInterpretation:\n\nInterpreting results to gain insights into ecological, biological, or geographical processes\n\n\n\n\nApplications\n\nEcology:\n\nGenerating realistic and statistically similar spatial patterns\nUnderstanding the coexistence and competition among plant species\nStudying the spatial distribution of animal populations and their habitat preferences\n\nEpidemiology:\n\nAnalyzing the spread of diseases based on environmental factors and population characteristics\n\nUrban Planning:\n\nAssessing the spatial distribution of urban features (e.g., green spaces, buildings) and their associated traits (e.g., building types, land use)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "simple_application_example.html",
    "href": "simple_application_example.html",
    "title": "2  Simple application example",
    "section": "",
    "text": "The following example demonstrates a simple application of Multi-Trait Point Pattern Reconstruction (MTPPR) presented in Wudel et al. (2023). It illustrates reconstruction using fictitious datasets that incorporate multiple traits simultaneously. The required libraries must be loaded beforehand.\n\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/reconstruct_pattern_multi.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/compute_statistics.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/dummy_transf.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/energy_fun.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/calc_moments.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/select_kernel.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/plot.rd_multi.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/sample_points.R\")\nlibrary(spatstat)\n\nPlease note that the maximum number of iterations has been set to max_steps = 10000 and n_repetitions = 3 in this example to keep computation time low. No weighting of different summary statistics has been performed, which may be necessary for different applications (e.g., forest stands) to achieve optimal results. For real-world applications, it is advisable to adjust these parameters accordingly. Additionally, in the vignette, verbose = FALSE has been set to minimize print output. We recommend using the default setting verbose = TRUE when running the code to see progress reports.\nThe next step is to load the point pattern, here is an example of a random point pattern with several marks to show the structure of the data used.\n\nxr &lt;- 500\nyr &lt;- 1000\nN  &lt;- 400\ny  &lt;- runif(N, min = 0, max = yr)\nx  &lt;- runif(N, min = 0, max = xr)\nspecies  &lt;- sample(c(\"A\",\"B\"), N, replace = TRUE)\ndiameter &lt;- runif(N, 0.1, 0.4)\nrandom   &lt;- data.frame(x = x, y = y, dbh = diameter, species = factor(species))\nmarked_pattern &lt;- as.ppp(random, W = owin(c(0, xr), c(0, yr)))\n\nThe point pattern must contain the following data. An x and y coordinate, a metric mark (in metres) and a nominal mark defined as a factor. The order must be respected. Now the reconstruction with several marks can be started with the following code. Note that the maximum number of iterations has been set to max_steps = 10000 to keep the computation time for this example to a minimum. For an application, this value should be increased according to the number of points in the pattern.\n\nreconstruction &lt;- reconstruct_pattern_multi(marked_pattern, n_repetitions = 1, max_steps = 10000, issue = 5000, verbose = TRUE)\n\n\n&gt; Progress:  || iterations: 0 || Simulation progress: 0% || energy = 0.0895 || energy improvement = 0\n&gt; Progress:  || iterations: 5000 || Simulation progress: 50% || energy = 0.00138 || energy improvement = 298\n&gt; Progress:  || iterations: 10000 || Simulation progress: 100% || energy = 0.00135 || energy improvement = 477\n\n\nAs a result, you will receive a list containing a variety of information, for example, the reference pattern, the reconstructed pattern, the number of successful actions, the energy development and much more. If you wish to perform several reconstructions of the same reference pattern, you must increase n_repetitions to the desired number.\n\nreconstruction_2 &lt;- reconstruct_pattern_multi(marked_pattern, n_repetitions = 2, max_steps = 10000, issue = 5000, verbose = TRUE)\n\n\n&gt; Progress: reconstruction_1 || iterations: 0 || Simulation progress: 0% || energy = 0.13654 || energy improvement = 0\n&gt; Progress: reconstruction_1 || iterations: 5000 || Simulation progress: 50% || energy = 0.00171 || energy improvement = 326\n&gt; Progress: reconstruction_1 || iterations: 10000 || Simulation progress: 100% || energy = 0.00167 || energy improvement = 520\n\n\n&gt; Progress: reconstruction_2 || iterations: 0 || Simulation progress: 0% || energy = 0.11497 || energy improvement = 0\n&gt; Progress: reconstruction_2 || iterations: 5000 || Simulation progress: 50% || energy = 0.00215 || energy improvement = 331\n&gt; Progress: reconstruction_2 || iterations: 10000 || Simulation progress: 100% || energy = 0.00211 || energy improvement = 512\n\n\nTo activate a visualisation of the reconstruction that shows the changes in the pattern at the relevant time, you must proceed as follows.\n\nreconstruction_3 &lt;- reconstruct_pattern_multi(marked_pattern, n_repetitions = 1, max_steps = 10000, show_graphic = TRUE, issue = 5000, verbose = TRUE) \n\n\n&gt; Progress:  || iterations: 0 || Simulation progress: 0% || energy = 0.08328 || energy improvement = 0\n&gt; Progress:  || iterations: 5000 || Simulation progress: 50% || energy = 0.00099 || energy improvement = 308\n&gt; Progress:  || iterations: 10000 || Simulation progress: 100% || energy = 0.00094 || energy improvement = 511\n\n\n\n\n\n\n\n\n\nFinally, you can use the following function to view different summary statistics of the reference pattern (black line) compared to the reconstructed pattern (grey line). For this, however, the listed libraries must be loaded additionally.\n\nplot(reconstruction)\n\nProgress in the creation of the figures: 100%",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Simple application example</span>"
    ]
  },
  {
    "objectID": "further_application_examples.html",
    "href": "further_application_examples.html",
    "title": "3  Further application examples",
    "section": "",
    "text": "In the following, further examples of the simple application of Multi-Trait Point Pattern Reconstruction (MTPPR) presented in Wudel et al. (2023) are presented. These are standard applications, meaning that reconstructions are performed without enlargements or reductions of the reconstruction pattern and without edge correction.\nFirst, the necessary functions and packages will be loaded. If individual R packages are not installed, install them as follows: install.packages(\"package name\").\n\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/reconstruct_pattern_multi.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/compute_statistics.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/dummy_transf.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/energy_fun.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/calc_moments.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/select_kernel.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/plot.rd_multi.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/sample_points.R\")\n\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/vis_patterns.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/select_data.R\")\n\nlibrary(spatstat)\nlibrary(ggplot2)\nlibrary(patchwork)\n\nNow you need to define which dataset you want to use. There are 2 real datasets and 4 generated datasets available. To select a dataset, define x with the name of the dataset you want to use (x &lt;- ‘Dataset Name’). The datasets are available under ’Records for download.\n\nx &lt;- \"random\" ## The following sets can be imported: \n                                   ## Real datasets:\n                                    ##    \"VERMOS_project\" \n                                    ##    \"Northwest_German_Forest_Research_Institute\" \n                                    ##   \"Marteloscope_data_from_the_by_the_Chair_of_Forest_Growth_and_Woody_Biomass_Production\"\n                                   ## Simulated patterns:\n                                    ##    \"random\"\n                                    ##    \"regular\"\n                                    ##    \"cluster_size5\"\n                                    ##    \"cluster_size5_and_random\"\n                                   ## to do this, declare x with the corresponding name in \"\". \ndata &lt;- data_import(x)\nW &lt;- data[[2]] \ndata &lt;- data [[1]] \n\nThe following parameters are predefined and can be varied arbitrarily in an application file (Application of the Multi-trait Point pattern reconstruction.R) where you can use this code, available for download under the Application folder. It should be noted that for optimal results, the parameter max_steps should be at least approximately ten times the number of points in the pattern, and the parameter for weights (w_markcorr) of individual summary statistics needs to be adjusted according to different scenarios. Here, a small number of steps was chosen to save computation time.\n\nmarked_pattern &lt;- as.ppp(data.frame(data), W = W)   \nmarked_pattern$marks$dbh..mm.&lt;-marked_pattern$marks$dbh..mm.*0.001   \nxr &lt;- marked_pattern$window$xrange\nyr &lt;- marked_pattern$window$yrange\n                                                                               \nreconstruction &lt;- reconstruct_pattern_multi(\n  marked_pattern, \n  n_repetitions     = 1,     \n  max_steps         = 10000,     \n  no_change         = 5,  \n  rcount            = 250,     \n  rmax              = 25,      \n  issue             = 1000,       \n  divisor           = \"r\",    \n  kernel_arg        = \"epanechnikov\",\n  timing            = TRUE,    \n  energy_evaluation = TRUE,\n  show_graphic      = FALSE,  \n  Lp                = 1,    \n  bw                = 0.5,\n  sd                = \"step\",\n  steps_tol         = 1000,   \n  tol               = 1e-4,   \n  w_markcorr        = c(m_m=1,one_one=0,  all=1, m_all=1, all_all=1, m_m0=1, one_one0=0, all0=1, m_all0=1, all_all0=1),\n  prob_of_actions   = c(move_coordinate = 0.4, switch_coords = 0.1, exchange_mark_one = 0.1, exchange_mark_two = 0.1, pick_mark_one = 0.2, pick_mark_two = 0.1, delete_point = 0.0, add_point = 0.0), \n  k                 = 1,       \n  w_statistics      = c(),              \n  verbose           = TRUE)  \n\nAs a result, you will receive a list with a variety of information, such as the reference pattern, the reconstructed pattern, the number of successful actions, the energy development, and much more. To illustrate the results, first compare the reference pattern with the reconstructed pattern.\n\nvis_pp(reconstruction) \n\n\n\n\n\n\n\n\nFinally, you can use the following function to compare various summary statistics of the reference pattern (black line) with the reconstructed pattern (grey line). Another function (plot_sum_stat) is capable of displaying these summary statistics in a single diagram for multiple repetitions of the reconstructions (n_repetitions &gt; 1), and it is used in the previously mentioned application file (Application of the Multi-trait Point pattern reconstruction.R). For simplicity, this functionality has been omitted here.\n\nplot(reconstruction)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Further application examples</span>"
    ]
  },
  {
    "objectID": "specialized_application.html",
    "href": "specialized_application.html",
    "title": "4  Specialized application",
    "section": "",
    "text": "This represents a novel workflow for predicting forest regeneration. Initially, the canopy of a forest area and a small portion of the regeneration were captured using terrestrial laser scanning. Based on spatial statistical tree data and correlations between tree characteristics, a point pattern reconstruction method was developed, building upon the work of Wudel et al. (2023). This method facilitates the prediction of regeneration across the entire area with high accuracy.\n\nFigure: Conceptual presentation of the new innovative workflow for data acquisition and reconstruction of forest regeneration (LiDAR = Light Detection and Ranging). a) Recording regeneration on a small area and b) recording of the upper stand trees at the whole forest area.\nThe following code can be used to execute the workflow using an available dataset. First, the necessary functions and packages are loaded.\n\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/reconstruct_pattern_multi.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/compute_statistics.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/dummy_transf.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/energy_fun.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/calc_moments.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/select_kernel.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/plot.rd_multi.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/sample_points.R\")\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/edge_correction.R\")\n\nsource(\"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/func/vis_patterns.R\")\n\nlibrary(spatstat)\nlibrary(ggplot2)\n\nSubsequently, the dataset is retrieved from the ‘Records’ folder on GitHub and published and freely available at the following link: https://zenodo.org/records/10550778 (Meyer and Wudel, 2024).\n\nurl &lt;- \"https://raw.githubusercontent.com/ChrisWudel/Multi-trait-point-pattern-reconstruction/main/Records/Real_datasets/Terrestrial_laser_scan_data_340_a31.csv\"\ndata &lt;- read.csv(url,sep = \",\", stringsAsFactors= TRUE)\ndata$dbh &lt;- as.numeric(data$dbh)\n\nBelow are the parameter settings chosen for this example. These may and should be adjusted for other datasets to achieve good results. Note: the maximum number of steps has also been reduced here to limit computation time.\n\nW &lt;- owin(c(0, 100),c(0, 100))\ncore_window &lt;- owin(c(35, 65),c(35, 65))\n\nmarked_pattern &lt;- as.ppp(data.frame(data), W = W)  \nmarked_pattern$marks$dbh &lt;- marked_pattern$marks$dbh*0.001  \nxr &lt;- marked_pattern$window$xrange\nyr &lt;- marked_pattern$window$yrange\nobs_window = owin(c(xr),c(yr))\n\nreconstruction &lt;- reconstruct_pattern_multi(\nmarked_pattern,\nfixed_points      = NULL,\nedge_correction   = TRUE,     \nn_repetitions     = 1,     \nmax_steps         = 10000,     \nno_change         = 5,     \nrcount            = 250,     \nrmax              = 25,      \nissue             = 5000,       \ndivisor           = \"r\",    \nkernel_arg        = \"epanechnikov\",\ntiming            = TRUE,    \nenergy_evaluation = TRUE,\nshow_graphic      = FALSE,  \nLp                = 1,      \nbw                = 0.5,\nsd                = \"step\",\nsteps_tol         = 10000,   \ntol               = 1e-4,   \nw_markcorr        = c(m_m=0,one_one=1500,  all=1, m_all=1, all_all=1, m_m0=1500, one_one0=1, all0=1, m_all0=1, all_all0=1),\nprob_of_actions   = c(move_coordinate = 0.3, switch_coords = 0.1, exchange_mark_one = 0.1, exchange_mark_two = 0.1, pick_mark_one = 0.1, pick_mark_two = 0.1, delete_point = 0.1, add_point = 0.1), \nk                 = 1,       \nw_statistics      = c(),              \nis.fixed          = function(p) 35 &lt;= p$x & p$x &lt;= 65 & 35 &lt;= p$y & p$y &lt;= 65 | p$mark[,\"dbh\"] &gt; 0.1,\nverbose           = TRUE) \n\n\n&gt; Progress:  || iterations: 0 || Simulation progress: 0% || energy = 37661.73293 || energy improvement = 0\n&gt; Progress:  || iterations: 5000 || Simulation progress: 50% || energy = 11668.098 || energy improvement = 72\n&gt; Progress:  || iterations: 10000 || Simulation progress: 100% || energy = 5203.89483 || energy improvement = 82\n\n\nThe following figure shows the results of the workflow, which are from an example not derived from the current run. The figure has been created retroactively and is not generated by the function provided. Additionally, in this simulation, significantly more simulation steps were conducted, which would take too long to render for this handbook.\n\nFigure: Results of the 100 reconstructions of the dataset described above; (a) reference pattern with core area, black outlined area (b) an example of a reconstruction in which the core area is outlined in black and the comparison area is outlined in black dashed lines. Summary statistics (c)–(f) were generated using the R package ‘spatstat’: (c) K function; (d) pcf; (e) mcf of the species, where the test function has value if both species coincide and if not; (f) mcf of the diameter, the test function being the usual product. For distances up to  = 25 m (indicated by the vertical dashed line in (c)–(f)). The black solid lines represent the reference curve and the grey solid lines represent the 100 reconstructions. The dashed black line is the mean of the 100 reconstructions.\nIt is evident that the tree distributions in these two areas are similar. For instance, Fagus sylvatica is observed with high intensity only in specific regions of the reference area, and this has been successfully reproduced. Furthermore, it is noticeable that smaller gaps in the reference area, where canopy trees are spaced similarly, are not occupied by regeneration plants in the comparison area. Also includes the previously mentioned summary statistics of all 100 reconstructions (c)-(f). These statistics demonstrate that the reconstructions perform well (gray lines = reconstructions, solid black line = reference). Within the range up to 25 m, which was considered during reconstruction, deviations from the reference in the K-function (c) are minimal. The pcf (d) shows a slight systematic deviation. The mcf of the species (e) exhibit only minimal discrepancies. The mcf of diameters (f) show smaller discrepancies in the same close range as the pcf. However, deviations become significantly larger and more diverse once the 25 m range is exceeded. This highlights the effectiveness and impact of the mcf’s in the reconstruction method.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Specialized application</span>"
    ]
  },
  {
    "objectID": "summary_references.html",
    "href": "summary_references.html",
    "title": "5  Summary and references",
    "section": "",
    "text": "This Handbook is intended to facilitate the use of MTPPR and to illustrate its broad application through various examples. The method is still under development and will be regularly updated with changes.\nIf you have any questions, please contact the author:\nChris Wudel, Email: chris.wudel@tu-dresden.de\nOr one of the following co-authors:\n\nDr. Robert Schlicht (co-developer), Email: robert.schlicht@tu-dresden.de\nProf. Dr. Uta Berger (supervised and revised), Email: uta.berger@tu-dresden.de\nDr. Franka Huth (data collection and forestry consultation), Email: franka.huth@tu-dresden.de\nNora Meyer (data collection TLS), Email: nora.meyer@tu-dresden.de\nAlexandra Wehnert (data collection), Email: alexandra.wehnert@tu-dresden.de\n\n\nReferences\nFurther references, for example regarding the method description, can be found in the respective publications.\n\nFichtner, I., van der Maaten-Theunissen, M., 2022. Marteloscope data of the experimental plot, Naundorf 710 b1 (Saxony, Germany 2020). Zenodo. https://doi.org/10.5281/zenodo.7147868\nMeyer, N., Wudel, C., 2024. Terrestrial laser scan data of a experimental plot in Forstamt Billenhagen, 340 a31 (Mecklenburg- Vorpommern, Germany 2023). https://doi.org/10.5281/zenodo.10550778\nWudel, C., Huth, F., Wehnert, A., 2022a. Individual tree data of the temporary test plot Neusorgefeld 5138 - VERMOS project. Zenodo. https://doi.org/10.5281/zenodo.7157076\nWudel, C., Schlicht, R., Berger, U., 2023. Multi-trait point pattern reconstruction of plant ecosystems. Methods Ecol. Evol. 14, 2668–2679. https://doi.org/https://doi.org/10.1111/2041-210X.14206\nWudel, C., Schlicht, R., Berger, U., 2022b. Point-pattern-reconstruction. Zenodo. https://doi.org/10.5281/zenodo.7228767",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary and references</span>"
    ]
  }
]